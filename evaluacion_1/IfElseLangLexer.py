# Generated from IfElseLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,94,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,
        13,1,13,1,14,1,14,1,15,1,15,5,15,78,8,15,10,15,12,15,81,9,15,1,16,
        4,16,84,8,16,11,16,12,16,85,1,17,4,17,89,8,17,11,17,12,17,90,1,17,
        1,17,0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,1,0,5,3,0,42,43,45,45,
        47,47,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,3,0,9,10,13,13,32,32,96,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,
        1,0,0,0,3,40,1,0,0,0,5,45,1,0,0,0,7,47,1,0,0,0,9,49,1,0,0,0,11,51,
        1,0,0,0,13,53,1,0,0,0,15,55,1,0,0,0,17,57,1,0,0,0,19,59,1,0,0,0,
        21,61,1,0,0,0,23,64,1,0,0,0,25,67,1,0,0,0,27,70,1,0,0,0,29,73,1,
        0,0,0,31,75,1,0,0,0,33,83,1,0,0,0,35,88,1,0,0,0,37,38,5,105,0,0,
        38,39,5,102,0,0,39,2,1,0,0,0,40,41,5,101,0,0,41,42,5,108,0,0,42,
        43,5,115,0,0,43,44,5,101,0,0,44,4,1,0,0,0,45,46,5,40,0,0,46,6,1,
        0,0,0,47,48,5,41,0,0,48,8,1,0,0,0,49,50,5,123,0,0,50,10,1,0,0,0,
        51,52,5,125,0,0,52,12,1,0,0,0,53,54,5,59,0,0,54,14,1,0,0,0,55,56,
        5,61,0,0,56,16,1,0,0,0,57,58,5,62,0,0,58,18,1,0,0,0,59,60,5,60,0,
        0,60,20,1,0,0,0,61,62,5,61,0,0,62,63,5,61,0,0,63,22,1,0,0,0,64,65,
        5,62,0,0,65,66,5,61,0,0,66,24,1,0,0,0,67,68,5,60,0,0,68,69,5,61,
        0,0,69,26,1,0,0,0,70,71,5,33,0,0,71,72,5,61,0,0,72,28,1,0,0,0,73,
        74,7,0,0,0,74,30,1,0,0,0,75,79,7,1,0,0,76,78,7,2,0,0,77,76,1,0,0,
        0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,32,1,0,0,0,81,79,
        1,0,0,0,82,84,7,3,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,
        85,86,1,0,0,0,86,34,1,0,0,0,87,89,7,4,0,0,88,87,1,0,0,0,89,90,1,
        0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,93,6,17,0,0,93,
        36,1,0,0,0,4,0,79,85,90,1,6,0,0
    ]

class IfElseLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    LPAREN = 3
    RPAREN = 4
    LBRACE = 5
    RBRACE = 6
    SEMI = 7
    ASSIGN = 8
    GT = 9
    LT = 10
    EQ = 11
    GE = 12
    LE = 13
    NE = 14
    ARITH_OP = 15
    ID = 16
    NUMBER = 17
    WS = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'('", "')'", "'{'", "'}'", "';'", "'='", 
            "'>'", "'<'", "'=='", "'>='", "'<='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", 
            "ASSIGN", "GT", "LT", "EQ", "GE", "LE", "NE", "ARITH_OP", "ID", 
            "NUMBER", "WS" ]

    ruleNames = [ "IF", "ELSE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                  "SEMI", "ASSIGN", "GT", "LT", "EQ", "GE", "LE", "NE", 
                  "ARITH_OP", "ID", "NUMBER", "WS" ]

    grammarFileName = "IfElseLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


